// api-server.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô - –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç index.js)
import express from 'express';
import { spawn } from 'child_process';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import https from 'https';
import http from 'http';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json({ limit: '50mb' }));

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const dirs = ['uploads', 'outputs', 'temp'];
dirs.forEach(dir => {
  const dirPath = path.join(__dirname, dir);
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
});

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function downloadImage(url, filepath) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(filepath);
    const request = url.startsWith('https:') ? https : http;
    
    request.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`HTTP Error: ${response.statusCode}`));
        return;
      }
      
      response.pipe(file);
      
      file.on('finish', () => {
        file.close();
        resolve();
      });
      
      file.on('error', (err) => {
        fs.unlink(filepath, () => {});
        reject(err);
      });
    }).on('error', (err) => {
      reject(err);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ CLI editly
function createVideoWithEditly(specPath, outputPath, options = {}) {
  return new Promise((resolve, reject) => {
    const args = [specPath, '--out', outputPath];
    
    if (options.fast) {
      args.push('--fast');
    }
    
    console.log('üé¨ –ó–∞–ø—É—Å–∫ editly CLI:', 'npx editly', args.join(' '));
    
    const editlyProcess = spawn('npx', ['editly', ...args], {
      cwd: __dirname,
      stdio: 'pipe'
    });
    
    let stdout = '';
    let stderr = '';
    
    editlyProcess.stdout.on('data', (data) => {
      stdout += data.toString();
      console.log('üìπ Editly:', data.toString().trim());
    });
    
    editlyProcess.stderr.on('data', (data) => {
      stderr += data.toString();
      console.error('‚ö†Ô∏è Editly error:', data.toString().trim());
    });
    
    editlyProcess.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ Editly –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        resolve({ stdout, stderr });
      } else {
        console.error('‚ùå Editly –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π, –∫–æ–¥:', code);
        reject(new Error(`Editly exited with code ${code}. Stderr: ${stderr}`));
      }
    });
    
    editlyProcess.on('error', (error) => {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ editly:', error);
      reject(error);
    });
  });
}

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
app.post('/api/create-news-video', async (req, res) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ');
  
  try {
    const {
      title = 'üî• –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è',
      backgroundImage,
      duration = 149,
      channelName = 'üì∫ –ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ',
      subscribeText = 'üëÜ –ü–û–î–ü–ò–®–ò–°–¨ –ù–ê –ö–ê–ù–ê–õ!',
      newsText = '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª',
      fast = false
    } = req.body;

    if (!backgroundImage) {
      return res.status(400).json({ 
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è backgroundImage URL',
        example: {
          title: 'üî• –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è',
          backgroundImage: 'https://images.unsplash.com/photo-xxxx',
          duration: 149
        }
      });
    }

    const timestamp = Date.now();
    const imageFilename = `bg_${timestamp}.jpg`;
    const videoFilename = `news_${timestamp}.mp4`;
    const specFilename = `spec_${timestamp}.json5`;
    
    const imagePath = path.join(__dirname, 'temp', imageFilename);
    const outputPath = path.join(__dirname, 'outputs', videoFilename);
    const specPath = path.join(__dirname, 'temp', specFilename);

    console.log('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    await downloadImage(backgroundImage, imagePath);
    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ');

    console.log('üìù –°–æ–∑–¥–∞–µ–º JSON5 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    
    // –°–æ–∑–¥–∞–µ–º JSON5 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è editly CLI
    const editSpec = {
      outPath: outputPath,
      width: 1920,
      height: 1080,
      fps: 30,
      fast: fast,
      
      clips: [{
        duration: duration,
        layers: [
          // –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          {
            type: 'image',
            path: imagePath,
            resizeMode: 'cover'
          },
          
          // –¢–µ–º–Ω–∞—è –Ω–∞–∫–ª–∞–¥–∫–∞
          {
            type: 'fill-color',
            color: 'rgba(0,0,0,0.4)'
          },
          
          // Breaking News –±–∞–Ω–Ω–µ—Ä
          {
            type: 'title',
            text: 'üî• –í–ê–ñ–ù–´–ï –ù–û–í–û–°–¢–ò ‚Ä¢ BREAKING NEWS ‚Ä¢ –°–†–û–ß–ù–û üî•',
            fontSize: 28,
            textColor: 'white',
            backgroundColor: 'rgba(255,0,0,0.9)',
            position: { x: 0.5, y: 0.05, originX: 'center', originY: 'top' }
          },
          
          // –î–∞—Ç–∞
          {
            type: 'title',
            text: 'üìÖ ' + new Date().toLocaleDateString('ru-RU'),
            fontSize: 24,
            textColor: '#ffdf00',
            backgroundColor: 'rgba(0,0,0,0.8)',
            position: { x: 0.05, y: 0.15, originX: 'left', originY: 'top' }
          },
          
          // LIVE –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
          {
            type: 'title',
            text: 'üî¥ LIVE',
            fontSize: 20,
            textColor: 'white',
            backgroundColor: 'rgba(255,0,0,0.9)',
            position: { x: 0.05, y: 0.25, originX: 'left', originY: 'top' }
          },
          
          // –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
          {
            type: 'title',
            text: title,
            fontSize: 52,
            textColor: 'white',
            backgroundColor: 'rgba(0,0,0,0.9)',
            position: { x: 0.5, y: 0.5, originX: 'center', originY: 'center' }
          },
          
          // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
          {
            type: 'title',
            text: channelName,
            fontSize: 32,
            textColor: 'white',
            backgroundColor: 'rgba(255,0,0,0.8)',
            position: { x: 0.5, y: 0.85, originX: 'center', originY: 'center' }
          },
          
          // –ü—Ä–∏–∑—ã–≤ –∫ –ø–æ–¥–ø–∏—Å–∫–µ
          {
            type: 'title',
            text: subscribeText,
            fontSize: 28,
            textColor: 'black',
            backgroundColor: 'rgba(0,255,0,0.9)',
            position: { x: 0.95, y: 0.95, originX: 'right', originY: 'bottom' }
          }
        ]
      }]
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
    fs.writeFileSync(specPath, JSON.stringify(editSpec, null, 2));
    console.log('üìÑ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', specPath);

    console.log('üé• –ó–∞–ø—É—Å–∫–∞–µ–º editly –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ...');
    console.log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} —Å–µ–∫—É–Ω–¥`);
    
    // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ editly CLI
    await createVideoWithEditly(specPath, outputPath, { fast });
    
    console.log('‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    [imagePath, specPath].forEach(file => {
      if (fs.existsSync(file)) {
        fs.unlinkSync(file);
      }
    });
    console.log('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ
    if (!fs.existsSync(outputPath)) {
      throw new Error('–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
    }
    
    const stats = fs.statSync(outputPath);
    const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
    
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSizeInMB} MB`);
    
    res.json({
      success: true,
      message: '–ù–æ–≤–æ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! üé¨',
      data: {
        filename: videoFilename,
        downloadUrl: `/api/download/${videoFilename}`,
        streamUrl: `/api/stream/${videoFilename}`,
        previewUrl: `/api/preview/${videoFilename}`,
        size: `${fileSizeInMB} MB`,
        duration: duration,
        resolution: '1920x1080',
        title: title,
        channelName: channelName,
        created: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ',
      message: error.message,
      details: error.stack
    });
  }
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.post('/api/test', async (req, res) => {
  console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ editly CLI –¥–æ—Å—Ç—É–ø–µ–Ω
    const testProcess = spawn('npx', ['editly', '--help'], {
      stdio: 'pipe'
    });
    
    let output = '';
    testProcess.stdout.on('data', (data) => {
      output += data.toString();
    });
    
    testProcess.on('close', (code) => {
      res.json({
        success: true,
        message: 'API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        editlyAvailable: code === 0,
        editlyOutput: output.substring(0, 200) + '...',
        environment: {
          nodeVersion: process.version,
          platform: process.platform,
          cwd: process.cwd()
        }
      });
    });
    
  } catch (error) {
    res.json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      error: error.message
    });
  }
});

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
app.get('/api/download/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(__dirname, 'outputs', filename);
  
  if (!fs.existsSync(filepath)) {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  res.download(filepath, filename);
});

// –°—Ç—Ä–∏–º–∏–Ω–≥ –≤–∏–¥–µ–æ
app.get('/api/stream/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(__dirname, 'outputs', filename);
  
  if (!fs.existsSync(filepath)) {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const stat = fs.statSync(filepath);
  const fileSize = stat.size;
  const range = req.headers.range;
  
  if (range) {
    const parts = range.replace(/bytes=/, "").split("-");
    const start = parseInt(parts[0], 10);
    const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1;
    const chunksize = (end - start) + 1;
    const file = fs.createReadStream(filepath, { start, end });
    const head = {
      'Content-Range': `bytes ${start}-${end}/${fileSize}`,
      'Accept-Ranges': 'bytes',
      'Content-Length': chunksize,
      'Content-Type': 'video/mp4',
    };
    res.writeHead(206, head);
    file.pipe(res);
  } else {
    const head = {
      'Content-Length': fileSize,
      'Content-Type': 'video/mp4',
    };
    res.writeHead(200, head);
    fs.createReadStream(filepath).pipe(res);
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    message: 'üé¨ Editly News Video API –Ω–∞ Railway',
    version: '2.0.0',
    description: 'API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ editly CLI',
    
    endpoints: {
      test: 'POST /api/test',
      createVideo: 'POST /api/create-news-video',
      download: 'GET /api/download/:filename',
      stream: 'GET /api/stream/:filename'
    },
    
    example: {
      endpoint: '/api/create-news-video',
      method: 'POST',
      body: {
        title: 'üî• –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è',
        backgroundImage: 'https://images.unsplash.com/photo-xxxx',
        duration: 149,
        fast: false
      }
    },
    
    status: '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ'
  });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log('üé¨ ===== EDITLY NEWS VIDEO API =====');
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üåê URL: http://localhost:${PORT}`);
  console.log('üß™ –¢–µ—Å—Ç: POST /api/test');
  console.log('üé• –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ: POST /api/create-news-video');
  console.log('‚úÖ –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ!');
  console.log('=====================================');
});

export default app;
