// –ü–û–õ–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô api-server.js —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –≤–∏–¥–µ–æ
import express from 'express';
import { spawn } from 'child_process';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import https from 'https';
import http from 'http';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 8080;

app.use(cors());
app.use(express.json({ limit: '50mb' }));

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const dirs = ['uploads', 'outputs', 'temp'];
dirs.forEach(dir => {
  const dirPath = path.join(__dirname, dir);
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
});

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function downloadImage(url, filepath) {
  return new Promise((resolve, reject) => {
    const file = fs.createWriteStream(filepath);
    const request = url.startsWith('https:') ? https : http;
    
    request.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`HTTP Error: ${response.statusCode}`));
        return;
      }
      
      response.pipe(file);
      
      file.on('finish', () => {
        file.close();
        resolve();
      });
      
      file.on('error', (err) => {
        fs.unlink(filepath, () => {});
        reject(err);
      });
    }).on('error', (err) => {
      reject(err);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ FFmpeg
function sanitizeText(text) {
  if (!text) return '';
  return text
    .replace(/['"\\]/g, '') // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–ª–µ—à–∏
    .replace(/[^\w\s\u0400-\u04FF.,!?():-]/g, '') // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .slice(0, 100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
function createDynamicVideo(imagePaths, outputPath, options) {
  return new Promise((resolve, reject) => {
    const {
      title = 'üî• –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è',
      duration = 60,
      channelName = 'üì∫ AI –ù–æ–≤–æ—Å—Ç–∏',
      subscribeText = 'üëÜ –ü–û–î–ü–ò–®–ò–°–¨ –ù–ê –ö–ê–ù–ê–õ!',
      newsText = '',
      fast = false,
      enableKenBurns = true
    } = options;

    console.log(`üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ ${imagePaths.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
    const safeTitle = sanitizeText(title);
    const safeChannelName = sanitizeText(channelName);
    const safeSubscribeText = sanitizeText(subscribeText);

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const sentences = newsText.split(/[.!?]+/).filter(s => s.trim().length > 10);
    const sentencesPerImage = Math.max(1, Math.floor(sentences.length / imagePaths.length));
    
    const sceneDuration = duration / imagePaths.length;
    
    // –°—Ç—Ä–æ–∏–º –≤—Ö–æ–¥—ã –¥–ª—è FFmpeg
    const inputs = imagePaths.map(imagePath => ['-loop', '1', '-i', imagePath]).flat();
    
    // –°—Ç—Ä–æ–∏–º —Å–ª–æ–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º Ken Burns
    const filterParts = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    imagePaths.forEach((imagePath, index) => {
      const startTime = index * sceneDuration;
      const endTime = Math.min((index + 1) * sceneDuration, duration);
      const sceneLength = endTime - startTime;
      
      // –£–ü–†–û–©–ï–ù–ù–´–ô Ken Burns —ç—Ñ—Ñ–µ–∫—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
      let videoFilter = `[${index}:v]scale=1920:1080:force_original_aspect_ratio=increase,crop=1920:1080`;
      
      if (enableKenBurns) {
        // –ü—Ä–æ—Å—Ç–æ–π –∑—É–º –±–µ–∑ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        const zoomStart = 1.0;
        const zoomEnd = 1.15;
        
        videoFilter += `,zoompan=z='if(lte(zoom,${zoomStart}),${zoomEnd},max(${zoomStart + 0.001},zoom-0.002))':d=25*${sceneLength}:x='iw/2-(iw/zoom/2)':y='ih/2-(ih/zoom/2)':s=1920x1080`;
      }
      
      videoFilter += `,setpts=PTS-STARTPTS+${startTime}/TB[v${index}]`;
      filterParts.push(videoFilter);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã
      const sceneStart = index * sentencesPerImage;
      const sceneEnd = Math.min((index + 1) * sentencesPerImage, sentences.length);
      const sceneSentences = sentences.slice(sceneStart, sceneEnd);
      const subtitleText = sanitizeText(sceneSentences.join(' ').slice(0, 120));
      
      if (subtitleText) {
        filterParts.push(`[v${index}]drawtext=text='${subtitleText}':fontcolor=white:fontsize=28:x=(w-text_w)/2:y=h-100:box=1:boxcolor=black@0.8:boxborderw=8:enable='between(t,${startTime + 1},${endTime - 1})'[v${index}s]`);
      } else {
        filterParts.push(`[v${index}]copy[v${index}s]`);
      }
    });

    // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å—Ü–µ–Ω—ã
    const concatInputs = imagePaths.map((_, index) => `[v${index}s]`).join('');
    const concatFilter = `${concatInputs}concat=n=${imagePaths.length}:v=1:a=0[vconcat]`;
    filterParts.push(concatFilter);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ
    // –ö—Ä–∞—Å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∞
    filterParts.push(`[vconcat]drawbox=x=0:y=0:w=1920:h=80:color=red@0.9:t=fill[vbar]`);
    filterParts.push(`[vbar]drawtext=text='üî• –í–ê–ñ–ù–´–ï –ù–û–í–û–°–¢–ò ‚Ä¢ BREAKING NEWS ‚Ä¢ –°–†–û–ß–ù–û üî•':fontsize=24:fontcolor=white:x=(w-text_w)/2:y=25[vtop]`);
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –Ω–∞—á–∞–ª–µ –≤–∏–¥–µ–æ
    filterParts.push(`[vtop]drawtext=text='${safeTitle}':fontsize=44:fontcolor=white:x=(w-text_w)/2:y=200:box=1:boxcolor=black@0.8:boxborderw=12:enable='between(t,2,10)'[vtitle]`);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
    filterParts.push(`[vtitle]drawtext=text='${safeChannelName}':fontsize=28:fontcolor=white:x=(w-text_w)/2:y=h-200:box=1:boxcolor=red@0.8:boxborderw=8[vchannel]`);
    
    // –ü—Ä–∏–∑—ã–≤ –∫ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –∫–æ–Ω—Ü–µ
    const subscribeStart = Math.max(0, duration - 8);
    filterParts.push(`[vchannel]drawtext=text='${safeSubscribeText}':fontsize=32:fontcolor=black:x=(w-text_w)/2:y=h-50:box=1:boxcolor=yellow@0.9:boxborderw=10:enable='between(t,${subscribeStart},${duration})'[vfinal]`);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const filterComplex = filterParts.join('; ');

    // FFmpeg –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    const ffmpegArgs = [
      ...inputs,
      '-filter_complex', filterComplex,
      '-map', '[vfinal]',
      '-c:v', 'libx264',
      '-t', duration.toString(),
      '-pix_fmt', 'yuv420p',
      '-r', fast ? '24' : '30',
      '-preset', fast ? 'ultrafast' : 'medium',
      '-crf', fast ? '28' : '23',
      '-y',
      outputPath
    ];

    console.log('üé¨ FFmpeg –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)');

    const ffmpegProcess = spawn('ffmpeg', ffmpegArgs, {
      stdio: 'pipe'
    });

    let stdout = '';
    let stderr = '';

    ffmpegProcess.stdout.on('data', (data) => {
      stdout += data.toString();
    });

    ffmpegProcess.stderr.on('data', (data) => {
      stderr += data.toString();
      console.log('‚ö†Ô∏è FFmpeg:', data.toString().trim());
    });

    ffmpegProcess.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        resolve({ 
          stdout, 
          stderr,
          method: 'FFmpeg Dynamic (Fixed)',
          features: [
            '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            '–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Ken Burns —ç—Ñ—Ñ–µ–∫—Ç',
            '–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã',
            '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã'
          ]
        });
      } else {
        console.error('‚ùå FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π, –∫–æ–¥:', code);
        reject(new Error(`FFmpeg exited with code ${code}. Stderr: ${stderr}`));
      }
    });

    ffmpegProcess.on('error', (error) => {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FFmpeg:', error);
      reject(error);
    });
  });
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function createEnhancedVideo(imagePath, outputPath, options) {
  return new Promise((resolve, reject) => {
    const {
      title = 'üî• –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è',
      duration = 45,
      channelName = 'üì∫ AI –ù–æ–≤–æ—Å—Ç–∏',
      subscribeText = 'üëÜ –ü–û–î–ü–ò–®–ò–°–¨ –ù–ê –ö–ê–ù–ê–õ!',
      newsText = '',
      fast = false,
      enableKenBurns = true
    } = options;

    const safeTitle = sanitizeText(title);
    const safeChannelName = sanitizeText(channelName);
    const safeSubscribeText = sanitizeText(subscribeText);
    const safeNewsText = sanitizeText(newsText.slice(0, 200));

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Ken Burns —ç—Ñ—Ñ–µ–∫—Ç - —É–±—Ä–∞–ª –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ sin/cos —Ñ—É–Ω–∫—Ü–∏–∏
    let kenBurnsFilter = '';
    if (enableKenBurns) {
      kenBurnsFilter = `,zoompan=z='if(lte(zoom,1.0),1.15,max(1.001,zoom-0.0008))':d=25*${duration}:x='iw/2-(iw/zoom/2)':y='ih/2-(ih/zoom/2)':s=1920x1080`;
    }

    const ffmpegArgs = [
      '-loop', '1',
      '-i', imagePath,
      '-filter_complex', `
        [0:v]scale=1920:1080:force_original_aspect_ratio=increase,crop=1920:1080${kenBurnsFilter}[bg];
        [bg]drawbox=x=0:y=0:w=1920:h=80:color=red@0.9:t=fill[bg1];
        [bg1]drawtext=text='üî• –í–ê–ñ–ù–´–ï –ù–û–í–û–°–¢–ò ‚Ä¢ BREAKING NEWS ‚Ä¢ –°–†–û–ß–ù–û üî•':fontsize=24:fontcolor=white:x=(w-text_w)/2:y=25[bg2];
        [bg2]drawtext=text='üìÖ ${new Date().toLocaleDateString('ru-RU')}':fontsize=20:fontcolor=yellow:x=50:y=120[bg3];
        [bg3]drawtext=text='üî¥ LIVE':fontsize=18:fontcolor=white:x=50:y=150:box=1:boxcolor=red@0.9:boxborderw=5[bg4];
        [bg4]drawtext=text='${safeTitle}':fontsize=48:fontcolor=white:x=(w-text_w)/2:y=250:box=1:boxcolor=black@0.8:boxborderw=12:enable='between(t,2,12)'[bg5];
        [bg5]drawtext=text='${safeNewsText}':fontsize=28:fontcolor=white:x=(w-text_w)/2:y=h-150:box=1:boxcolor=black@0.8:boxborderw=8:enable='between(t,5,${duration-8})'[bg6];
        [bg6]drawtext=text='${safeChannelName}':fontsize=28:fontcolor=white:x=(w-text_w)/2:y=h-80:box=1:boxcolor=red@0.8:boxborderw=8[bg7];
        [bg7]drawtext=text='${safeSubscribeText}':fontsize=30:fontcolor=black:x=(w-text_w)/2:y=h-40:box=1:boxcolor=yellow@0.9:boxborderw=8:enable='between(t,${duration-10},${duration})'[final]
      `,
      '-map', '[final]',
      '-c:v', 'libx264',
      '-t', duration.toString(),
      '-pix_fmt', 'yuv420p',
      '-r', fast ? '24' : '30',
      '-preset', fast ? 'ultrafast' : 'medium',
      '-crf', fast ? '28' : '23',
      '-y',
      outputPath
    ];

    console.log('üé¨ FFmpeg –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)');

    const ffmpegProcess = spawn('ffmpeg', ffmpegArgs, {
      stdio: 'pipe'
    });

    let stdout = '';
    let stderr = '';

    ffmpegProcess.stdout.on('data', (data) => {
      stdout += data.toString();
    });

    ffmpegProcess.stderr.on('data', (data) => {
      stderr += data.toString();
      console.log('‚ö†Ô∏è FFmpeg:', data.toString().trim());
    });

    ffmpegProcess.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        resolve({ 
          stdout, 
          stderr,
          method: 'FFmpeg Enhanced (Fixed)',
          features: [
            'Ken Burns —ç—Ñ—Ñ–µ–∫—Ç',
            '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏—Ç—Ä—ã',
            '–ù–æ–≤–æ—Å—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∞',
            '–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã'
          ]
        });
      } else {
        console.error('‚ùå FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π, –∫–æ–¥:', code);
        reject(new Error(`FFmpeg exited with code ${code}. Stderr: ${stderr}`));
      }
    });

    ffmpegProcess.on('error', (error) => {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FFmpeg:', error);
      reject(error);
    });
  });
}

// –£–õ–£–ß–®–ï–ù–ù–´–ô API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
app.post('/api/create-news-video', async (req, res) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ');
  console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));
  
  try {
    const {
      title = 'üî• –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è',
      backgroundImage,
      duration = 45,
      channelName = 'üì∫ AI –ù–æ–≤–æ—Å—Ç–∏',
      subscribeText = 'üëÜ –ü–û–î–ü–ò–®–ò–°–¨ –ù–ê –ö–ê–ù–ê–õ!',
      fast = false,
      // –ù–û–í–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      enhanced = false,
      newsText = '',
      images = [],
      enableKenBurns = true,
      enableTextAnimations = true
    } = req.body;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    const isDynamic = Array.isArray(images) && images.length > 1;
    const isEnhanced = enhanced || enableKenBurns || newsText.length > 50;

    console.log(`üéØ –†–µ–∂–∏–º: ${isDynamic ? '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π' : (isEnhanced ? '–£–ª—É—á—à–µ–Ω–Ω—ã–π' : '–ü—Ä–æ—Å—Ç–æ–π')}`);
    console.log(`üìù –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏: ${newsText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${isDynamic ? images.length : 1}`);

    const timestamp = Date.now();
    const videoFilename = `news_${timestamp}.mp4`;
    const outputPath = path.join(__dirname, 'outputs', videoFilename);
    const tempDir = path.join(__dirname, 'temp', `project_${timestamp}`);

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    let result;

    if (isDynamic) {
      // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –†–ï–ñ–ò–ú: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      console.log('üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ...');
      
      const imagePaths = [];
      for (let i = 0; i < images.length; i++) {
        const imageUrl = typeof images[i] === 'string' ? images[i] : images[i].url;
        const imagePath = path.join(tempDir, `image_${i}.jpg`);
        
        console.log(`‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}/${images.length}...`);
        try {
          await downloadImage(imageUrl, imagePath);
          imagePaths.push(imagePath);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}:`, error.message);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          if (backgroundImage) {
            await downloadImage(backgroundImage, imagePath);
            imagePaths.push(imagePath);
          }
        }
      }

      if (imagePaths.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }

      result = await createDynamicVideo(imagePaths, outputPath, {
        title,
        duration,
        channelName,
        subscribeText,
        newsText,
        fast,
        enableKenBurns
      });

    } else {
      // –£–õ–£–ß–®–ï–ù–ù–´–ô –ò–õ–ò –ü–†–û–°–¢–û–ô –†–ï–ñ–ò–ú: –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageUrl = backgroundImage || (images[0] && (typeof images[0] === 'string' ? images[0] : images[0].url));
      
      if (!imageUrl) {
        return res.status(400).json({ 
          error: '–¢—Ä–µ–±—É–µ—Ç—Å—è backgroundImage URL –∏–ª–∏ –º–∞—Å—Å–∏–≤ images'
        });
      }

      const imagePath = path.join(tempDir, 'background.jpg');
      
      console.log('‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
      await downloadImage(imageUrl, imagePath);
      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ');

      if (isEnhanced) {
        console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ...');
        result = await createEnhancedVideo(imagePath, outputPath, {
          title,
          duration,
          channelName,
          subscribeText,
          newsText,
          fast,
          enableKenBurns
        });
      } else {
        console.log('üìº –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–∏–¥–µ–æ...');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        result = await createVideoWithFFmpeg(imagePath, outputPath, {
          title,
          duration,
          channelName,
          subscribeText,
          fast
        });
        result.method = 'FFmpeg Simple';
        result.features = ['–ë–∞–∑–æ–≤–æ–µ –≤–∏–¥–µ–æ'];
      }
    }
    
    console.log('‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if (fs.existsSync(tempDir)) {
      fs.rmSync(tempDir, { recursive: true, force: true });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ
    if (!fs.existsSync(outputPath)) {
      throw new Error('–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
    }
    
    const stats = fs.statSync(outputPath);
    const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
    
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSizeInMB} MB`);
    
    res.json({
      success: true,
      message: '–ù–æ–≤–æ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! üé¨',
      data: {
        filename: videoFilename,
        downloadUrl: `/api/download/${videoFilename}`,
        streamUrl: `/api/stream/${videoFilename}`,
        size: `${fileSizeInMB} MB`,
        duration: duration,
        resolution: '1920x1080',
        title: title,
        method: result.method,
        features: result.features,
        mode: isDynamic ? 'dynamic' : (isEnhanced ? 'enhanced' : 'simple'),
        created: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ',
      message: error.message
    });
  }
});

// –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function createVideoWithFFmpeg(imagePath, outputPath, options) {
  return new Promise((resolve, reject) => {
    const {
      title = 'üî• –í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è',
      duration = 149,
      channelName = 'üì∫ –ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ',
      subscribeText = 'üëÜ –ü–û–î–ü–ò–®–ò–°–¨ –ù–ê –ö–ê–ù–ê–õ!',
      fast = false
    } = options;

    const ffmpegArgs = [
      '-loop', '1',
      '-i', imagePath,
      '-f', 'lavfi',
      '-i', 'color=black:1920x1080:d=' + duration,
      '-filter_complex', `
        [0:v]scale=1920:1080:force_original_aspect_ratio=increase,crop=1920:1080[bg];
        [bg]drawbox=x=0:y=0:w=1920:h=100:color=red@0.9:t=fill[bg1];
        [bg1]drawtext=text='üî• –í–ê–ñ–ù–´–ï –ù–û–í–û–°–¢–ò ‚Ä¢ BREAKING NEWS ‚Ä¢ –°–†–û–ß–ù–û üî•':fontsize=28:fontcolor=white:x=(w-text_w)/2:y=25[bg2];
        [bg2]drawtext=text='üìÖ ${new Date().toLocaleDateString('ru-RU')}':fontsize=24:fontcolor=yellow:x=50:y=150[bg3];
        [bg3]drawtext=text='üî¥ LIVE':fontsize=20:fontcolor=white:x=50:y=200:box=1:boxcolor=red@0.9:boxborderw=5[bg4];
        [bg4]drawtext=text='${sanitizeText(title)}':fontsize=52:fontcolor=white:x=(w-text_w)/2:y=(h-text_h)/2:box=1:boxcolor=black@0.9:boxborderw=10[bg5];
        [bg5]drawtext=text='${sanitizeText(channelName)}':fontsize=32:fontcolor=white:x=(w-text_w)/2:y=h-200:box=1:boxcolor=red@0.8:boxborderw=5[bg6];
        [bg6]drawtext=text='${sanitizeText(subscribeText)}':fontsize=28:fontcolor=black:x=w-text_w-50:y=h-100:box=1:boxcolor=green@0.9:boxborderw=5[final]
      `,
      '-map', '[final]',
      '-c:v', 'libx264',
      '-t', duration.toString(),
      '-pix_fmt', 'yuv420p',
      '-r', fast ? '15' : '30',
      '-preset', fast ? 'ultrafast' : 'medium',
      '-y',
      outputPath
    ];

    const ffmpegProcess = spawn('ffmpeg', ffmpegArgs, {
      stdio: 'pipe'
    });

    let stdout = '';
    let stderr = '';

    ffmpegProcess.stdout.on('data', (data) => {
      stdout += data.toString();
    });

    ffmpegProcess.stderr.on('data', (data) => {
      stderr += data.toString();
    });

    ffmpegProcess.on('close', (code) => {
      if (code === 0) {
        resolve({ stdout, stderr });
      } else {
        reject(new Error(`FFmpeg exited with code ${code}. Stderr: ${stderr}`));
      }
    });

    ffmpegProcess.on('error', (error) => {
      reject(error);
    });
  });
}

// –¢–µ—Å—Ç FFmpeg
app.post('/api/test', async (req, res) => {
  console.log('üß™ –¢–µ—Å—Ç FFmpeg');
  
  try {
    const testProcess = spawn('ffmpeg', ['-version'], {
      stdio: 'pipe'
    });
    
    let output = '';
    testProcess.stdout.on('data', (data) => {
      output += data.toString();
    });
    
    testProcess.on('close', (code) => {
      res.json({
        success: true,
        message: 'Enhanced FFmpeg API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        ffmpegAvailable: code === 0,
        ffmpegVersion: output.split('\n')[0],
        modes: ['Simple', 'Enhanced', 'Dynamic'],
        features: [
          'Ken Burns —ç—Ñ—Ñ–µ–∫—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω)',
          '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
          '–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã',
          '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏—Ç—Ä—ã'
        ]
      });
    });
    
  } catch (error) {
    res.json({
      success: false,
      error: error.message
    });
  }
});

// Download –∏ stream endpoints
app.get('/api/download/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(__dirname, 'outputs', filename);
  
  if (!fs.existsSync(filepath)) {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  res.download(filepath, filename);
});

app.get('/api/stream/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(__dirname, 'outputs', filename);
  
  if (!fs.existsSync(filepath)) {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const stat = fs.statSync(filepath);
  const fileSize = stat.size;
  const range = req.headers.range;
  
  if (range) {
    const parts = range.replace(/bytes=/, "").split("-");
    const start = parseInt(parts[0], 10);
    const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1;
    const chunksize = (end - start) + 1;
    const file = fs.createReadStream(filepath, { start, end });
    const head = {
      'Content-Range': `bytes ${start}-${end}/${fileSize}`,
      'Accept-Ranges': 'bytes',
      'Content-Length': chunksize,
      'Content-Type': 'video/mp4',
    };
    res.writeHead(206, head);
    file.pipe(res);
  } else {
    const head = {
      'Content-Length': fileSize,
      'Content-Type': 'video/mp4',
    };
    res.writeHead(200, head);
    fs.createReadStream(filepath).pipe(res);
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    message: 'üé¨ Enhanced FFmpeg News Video API (FIXED)',
    version: '4.1.0',
    description: 'API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏',
    
    modes: {
      simple: '–ü—Ä–æ—Å—Ç–æ–µ –≤–∏–¥–µ–æ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)',
      enhanced: '–£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ (Ken Burns + —Ç–∏—Ç—Ä—ã) - –ò–°–ü–†–ê–í–õ–ï–ù–û',
      dynamic: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) - –ò–°–ü–†–ê–í–õ–ï–ù–û'
    },
    
    endpoints: {
      test: 'POST /api/test',
      createVideo: 'POST /api/create-news-video',
      download: 'GET /api/download/:filename',
      stream: 'GET /api/stream/:filename'
    },
    
    fixedFeatures: [
      '‚úÖ Ken Burns —ç—Ñ—Ñ–µ–∫—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω)',
      '‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã',
      '‚úÖ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏—Ç—Ä—ã',
      '‚úÖ –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã',
      '‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç–Ω–∞—è –ø–æ–ª–æ—Å–∞'
    ],
    
    status: '–ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –≤–∏–¥–µ–æ! üöÄ'
  });
});


app.listen(PORT, '0.0.0.0', () => {
  console.log('üé¨ ===== ENHANCED FFMPEG NEWS VIDEO API =====');
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('üé• –ú–µ—Ç–æ–¥—ã: Simple | Enhanced | Dynamic');
  console.log('‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
  console.log('   üé¨ Ken Burns —ç—Ñ—Ñ–µ–∫—Ç');
  console.log('   üñºÔ∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  console.log('   üìù –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã');
  console.log('   üé≠ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏—Ç—Ä—ã');
  console.log('================================================');
});

export default app;
