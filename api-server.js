// –ü–ï–†–ï–î–ï–õ–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –î–õ–Ø –í–ò–î–ï–û (–ù–ï –ö–ê–†–¢–ò–ù–û–ö)
import express from 'express';
import { spawn } from 'child_process';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import https from 'https';
import http from 'http';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 8080;

app.use(cors());
app.use(express.json({ limit: '50mb' }));

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const dirs = ['uploads', 'outputs', 'temp'];
dirs.forEach(dir => {
  const dirPath = path.join(__dirname, dir);
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è FFmpeg
function sanitizeText(text) {
  if (!text) return '';
  
  return text
    .replace(/['"\\]/g, '') // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–ª–µ—à–∏
    .replace(/:/g, ' - ') // –î–≤–æ–µ—Ç–æ—á–∏—è –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ç–∏—Ä–µ
    .replace(/=/g, ' —Ä–∞–≤–Ω–æ ') // –ó–Ω–∞–∫–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    .replace(/\[/g, '(') // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
    .replace(/\]/g, ')')
    .replace(/\n/g, ' ') // –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    .replace(/\r/g, ' ') 
    .replace(/\t/g, ' ') // –¢–∞–±—É–ª—è—Ü–∏–∏
    .replace(/[^\w\s\u0400-\u04FF.,!?()\-]/g, '') // –¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, ' ') // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
    .trim()
    .slice(0, 100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –í–ò–î–ï–û —Ñ–∞–π–ª–æ–≤
function downloadVideo(url, filepath, index = 0) {
  return new Promise((resolve, reject) => {
    console.log(`üì• [VIDEO ${index + 1}] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É: ${url}`);
    
    const tempPath = filepath + '.tmp';
    const file = fs.createWriteStream(tempPath);
    const request = url.startsWith('https:') ? https : http;
    
    const options = {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': '*/*', // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        'Accept-Language': 'en-US,en;q=0.9',
        'Cache-Control': 'no-cache',
        'Referer': 'https://www.pexels.com/' // –í–∞–∂–Ω–æ –¥–ª—è Pexels
      }
    };
    
    const req = request.get(url, options, (response) => {
      console.log(`üìä [VIDEO ${index + 1}] HTTP —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
      if (response.statusCode === 301 || response.statusCode === 302) {
        const newUrl = response.headers.location;
        console.log(`üîÑ [VIDEO ${index + 1}] –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: ${newUrl}`);
        file.close();
        fs.unlink(tempPath, () => {});
        return downloadVideo(newUrl, filepath, index)
          .then(resolve)
          .catch(reject);
      }
      
      if (response.statusCode !== 200) {
        file.close();
        fs.unlink(tempPath, () => {});
        reject(new Error(`HTTP Error ${response.statusCode} for video ${index + 1}: ${url}`));
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –¥–ª—è Pexels
      const contentType = response.headers['content-type'] || '';
      console.log(`üìÅ [VIDEO ${index + 1}] –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: "${contentType}"`);
      
      // Pexels —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π content-type, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ URL
      const isPexelsVideo = url.includes('pexels.com') && url.includes('.mp4');
      const isValidContentType = contentType.includes('video/') || 
                                contentType.includes('application/octet-stream') || 
                                contentType.includes('binary/octet-stream') ||
                                contentType === '';
      
      if (!isValidContentType && !isPexelsVideo) {
        file.close();
        fs.unlink(tempPath, () => {});
        reject(new Error(`Not a video (${contentType}) for video ${index + 1}: ${url}`));
        return;
      }
      
      console.log(`‚úÖ [VIDEO ${index + 1}] Content type validation passed (Pexels: ${isPexelsVideo})`);;
      
      console.log(`üíæ [VIDEO ${index + 1}] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...`);
      response.pipe(file);
      
      let downloadedBytes = 0;
      response.on('data', (chunk) => {
        downloadedBytes += chunk.length;
        if (downloadedBytes % 100000 === 0) { // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 100KB
          console.log(`üìà [VIDEO ${index + 1}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${(downloadedBytes / 1024 / 1024).toFixed(1)} MB`);
        }
      });
      
      file.on('finish', () => {
        file.close();
        console.log(`‚úÖ [VIDEO ${index + 1}] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${(downloadedBytes / 1024 / 1024).toFixed(1)} MB`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 50KB –¥–ª—è Pexels)
        if (downloadedBytes < 50000) {
          fs.unlink(tempPath, () => {});
          reject(new Error(`Video file too small (${downloadedBytes} bytes) for video ${index + 1}. Possible download issue.`));
          return;
        }
        
        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        fs.rename(tempPath, filepath, (err) => {
          if (err) {
            console.error(`‚ùå [VIDEO ${index + 1}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:`, err);
            fs.unlink(tempPath, () => {});
            reject(err);
          } else {
            console.log(`‚úÖ [VIDEO ${index + 1}] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);
            resolve();
          }
        });
      });
      
      file.on('error', (err) => {
        console.error(`‚ùå [VIDEO ${index + 1}] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:`, err);
        fs.unlink(tempPath, () => {});
        reject(err);
      });
    });
    
    req.on('error', (err) => {
      console.error(`‚ùå [VIDEO ${index + 1}] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, err);
      file.close();
      fs.unlink(tempPath, () => {});
      reject(err);
    });
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤–∏–¥–µ–æ
    req.setTimeout(120000, () => {
      console.error(`‚è∞ [VIDEO ${index + 1}] –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏: ${url}`);
      req.destroy();
      file.close();
      fs.unlink(tempPath, () => {});
      reject(new Error(`Download timeout for video ${index + 1}: ${url}`));
    });
  });
}

// –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–û–°–¢–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ø—Ä–æ—Å—Ç–æ —Å–∫–ª–µ–∏—Ç—å –≤–∏–¥–µ–æ + –∞—É–¥–∏–æ
function createUltraSimpleVideo(videoPaths, audioPath, outputPath, duration) {
  return new Promise((resolve, reject) => {
    console.log(`üé¨ –ü–†–û–°–¢–û–ï —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ ${videoPaths.length} –≤–∏–¥–µ–æ + –∞—É–¥–∏–æ`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    for (let i = 0; i < videoPaths.length; i++) {
      if (!fs.existsSync(videoPaths[i])) {
        return reject(new Error(`–í–∏–¥–µ–æ ${i + 1} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`));
      }
    }

    if (!fs.existsSync(audioPath)) {
      return reject(new Error('–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'));
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ concat
    const concatFile = path.join(path.dirname(outputPath), 'simple_list.txt');
    const concatContent = videoPaths.map(file => `file '${path.resolve(file)}'`).join('\n');
    fs.writeFileSync(concatFile, concatContent);
    
    console.log('üìù –°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–ª–µ–∏–≤–∞–Ω–∏—è');
    console.log(concatContent);

    // –ü–†–û–°–¢–ï–ô–®–ê–Ø –∫–æ–º–∞–Ω–¥–∞ FFmpeg - —Å–∫–ª–µ–∏—Ç—å –≤–∏–¥–µ–æ + –¥–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ
    const ffmpegArgs = [
      '-f', 'concat',
      '-safe', '0', 
      '-i', concatFile,
      '-i', audioPath,
      '-c:v', 'copy',  // –ö–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –ë–ï–ó –æ–±—Ä–∞–±–æ—Ç–∫–∏
      '-c:a', 'aac',   // –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
      '-t', duration.toString(),
      '-y',
      outputPath
    ];

    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–µ–π—à–µ–≥–æ FFmpeg');
    console.log('–ö–æ–º–∞–Ω–¥–∞:', ['ffmpeg', ...ffmpegArgs].join(' '));

    const ffmpegProcess = spawn('ffmpeg', ffmpegArgs, { stdio: 'pipe' });

    let stderr = '';
    ffmpegProcess.stderr.on('data', (data) => {
      stderr += data.toString();
      const line = data.toString().trim();
      if (line.includes('time=')) {
        console.log('‚ö°', line.match(/time=[\d:.]*/)?.[0] || 'processing...');
      }
    });

    ffmpegProcess.on('close', (code) => {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞
      if (fs.existsSync(concatFile)) {
        fs.unlinkSync(concatFile);
      }

      if (code === 0) {
        console.log('‚úÖ –ü–†–û–°–¢–û–ï –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ!');
        resolve({ 
          method: 'Ultra Simple Concat + Audio',
          features: ['–ü—Ä–æ—Å—Ç–æ–µ —Å–∫–ª–µ–∏–≤–∞–Ω–∏–µ ‚úì', '–ë–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚úì', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ‚úì']
        });
      } else {
        console.error('‚ùå FFmpeg –æ—à–∏–±–∫–∞, –∫–æ–¥:', code);
        console.error('–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ stderr:', stderr.split('\n').slice(-5).join('\n'));
        reject(new Error(`Simple FFmpeg failed with code ${code}`));
      }
    });

    ffmpegProcess.on('error', (error) => {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FFmpeg:', error);
      reject(error);
    });
  });
}

// –ì–õ–ê–í–ù–´–ô API ENDPOINT –î–õ–Ø –í–ò–î–ï–û
app.post('/api/create-news-video', async (req, res) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ò–ó –í–ò–î–ï–û');
  console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));
  
  try {
    const {
      title = '',
      duration = 45,
      channelName = '',
      subscribeText = '',
      newsText = '',
      videos = [], // –í–ò–î–ï–û –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!
      audio
    } = req.body;

    const timestamp = Date.now();
    const videoFilename = `news_from_videos_${timestamp}.mp4`;
    const outputPath = path.join(__dirname, 'outputs', videoFilename);
    const tempDir = path.join(__dirname, 'temp', `video_${timestamp}`);

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
    if (!Array.isArray(videos) || videos.length === 0) {
      return res.status(400).json({ 
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ (videos)'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ
    if (!audio || !audio.data) {
      return res.status(400).json({ 
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É–¥–∏–æ —Ñ–∞–π–ª (audio.data –≤ base64)'
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
    const audioPath = path.join(tempDir, 'audio.mp3');
    const audioBuffer = Buffer.from(audio.data, 'base64');
    fs.writeFileSync(audioPath, audioBuffer);
    console.log(`üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${(audioBuffer.length / 1024).toFixed(1)} KB`);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
    const limitedVideos = videos.slice(0, 4);
    console.log(`üìä –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${limitedVideos.length} –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤`);

    // –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤
    const videoPaths = [];
    
    for (let i = 0; i < limitedVideos.length; i++) {
      const videoData = limitedVideos[i];
      const videoUrl = videoData.url || videoData.pickedLink;
      const videoPath = path.join(tempDir, `video_${i}.mp4`);
      
      console.log(`\n‚¨áÔ∏è ===== –°–ö–ê–ß–ò–í–ê–ù–ò–ï –í–ò–î–ï–û ${i + 1}/${limitedVideos.length} =====`);
      console.log(`üîó URL: ${videoUrl}`);
      console.log(`üìÅ –ü—É—Ç—å: ${videoPath}`);
      
      try {
        await downloadVideo(videoUrl, videoPath, i);
        
        if (fs.existsSync(videoPath)) {
          const stats = fs.statSync(videoPath);
          if (stats.size > 50000) { // –ú–∏–Ω–∏–º—É–º 50KB –¥–ª—è Pexels
            videoPaths.push(videoPath);
            console.log(`‚úÖ –í–∏–¥–µ–æ ${i + 1} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${(stats.size / 1024 / 1024).toFixed(1)} MB`);
          } else {
            console.error(`‚ùå –í–∏–¥–µ–æ ${i + 1} —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: ${stats.size} –±–∞–π—Ç`);
          }
        } else {
          console.error(`‚ùå –§–∞–π–ª –≤–∏–¥–µ–æ ${i + 1} –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ ${i + 1}:`, error.message);
        
        if (i === 0) {
          console.error(`üí• –ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º`);
          throw error;
        }
      }
    }

    console.log(`üìä –ò–¢–û–ì–û –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${videoPaths.length} –∏–∑ ${limitedVideos.length} –≤–∏–¥–µ–æ`);

    if (videoPaths.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞');
    }

    // –ü–†–û–°–¢–ï–ô–®–ï–ï —Å–æ–∑–¥–∞–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ —Å–∫–ª–µ–∏—Ç—å –≤–∏–¥–µ–æ + –∞—É–¥–∏–æ
    const result = await createUltraSimpleVideo(videoPaths, audioPath, outputPath, duration);
    
    console.log('‚úÖ –í–∏–¥–µ–æ –∏–∑ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if (fs.existsSync(tempDir)) {
      fs.rmSync(tempDir, { recursive: true, force: true });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!fs.existsSync(outputPath)) {
      throw new Error('–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
    }
    
    const stats = fs.statSync(outputPath);
    const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
    
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSizeInMB} MB`);
    
    res.json({
      success: true,
      message: '–í–∏–¥–µ–æ –∏–∑ –í–ò–î–ï–û —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ! üé¨‚ú®',
      data: {
        filename: videoFilename,
        downloadUrl: `/api/download/${videoFilename}`,
        streamUrl: `/api/stream/${videoFilename}`,
        size: `${fileSizeInMB} MB`,
        duration: duration,
        resolution: '1920x1080',
        title: title,
        method: result.method,
        features: result.features,
        videosUsed: videoPaths.length,
        videosRequested: limitedVideos.length,
        mode: 'video_compilation',
        created: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –≤–∏–¥–µ–æ:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤',
      message: error.message
    });
  }
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ endpoints –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ (download, stream, test)
app.get('/api/download/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(__dirname, 'outputs', filename);
  
  if (!fs.existsSync(filepath)) {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  res.download(filepath, filename);
});

app.get('/api/stream/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(__dirname, 'outputs', filename);
  
  if (!fs.existsSync(filepath)) {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const stat = fs.statSync(filepath);
  const fileSize = stat.size;
  const range = req.headers.range;
  
  if (range) {
    const parts = range.replace(/bytes=/, "").split("-");
    const start = parseInt(parts[0], 10);
    const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1;
    const chunksize = (end - start) + 1;
    const file = fs.createReadStream(filepath, { start, end });
    const head = {
      'Content-Range': `bytes ${start}-${end}/${fileSize}`,
      'Accept-Ranges': 'bytes',
      'Content-Length': chunksize,
      'Content-Type': 'video/mp4',
    };
    res.writeHead(206, head);
    file.pipe(res);
  } else {
    const head = {
      'Content-Length': fileSize,
      'Content-Type': 'video/mp4',
    };
    res.writeHead(200, head);
    fs.createReadStream(filepath).pipe(res);
  }
});

app.get('/', (req, res) => {
  res.json({
    message: 'üé¨ VIDEO-BASED News Video API',
    version: '7.0.0 - –í–ò–î–ï–û –ò–ó –í–ò–î–ï–û',
    description: '–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤',
    
    features: {
      'üì• –í–∏–¥–µ–æ': '–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ MP4 —Ñ–∞–π–ª–æ–≤',
      'üéµ –ê—É–¥–∏–æ': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–∑–≤—É—á–∫–æ–π', 
      'üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞': 'FFmpeg –≤–∏–¥–µ–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è',
      'üìä –ö–∞—á–µ—Å—Ç–≤–æ': '–ù–∞—Å—Ç–æ—è—â–∏–µ –¥–≤–∏–∂—É—â–∏–µ—Å—è –∫–∞–¥—Ä—ã',
      'üé® –≠—Ñ—Ñ–µ–∫—Ç—ã': '–ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –≤–∏–¥–µ–æ'
    },
    
    status: '–ì–æ—Ç–æ–≤–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –í–ò–î–ï–û –ò–ó –í–ò–î–ï–û! üöÄ‚úÖ'
  });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log('üé¨ ===== VIDEO-BASED NEWS API =====');
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('‚ú® –†–µ–∂–∏–º: –í–ò–î–ï–û –ò–ó –í–ò–î–ï–û (–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏!)');
  console.log('üìπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: MP4, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ');
  console.log('üé¨ –°–æ–∑–¥–∞–Ω–∏–µ: –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤');
  console.log('=====================================');
});

export default app;
