// –ò–î–ï–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–û–í–û–°–¢–ù–´–• –í–ò–î–ï–û –ò–ó –ö–ê–†–¢–ò–ù–û–ö
import express from 'express';
import { spawn } from 'child_process';
import cors from 'cors';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import https from 'https';
import http from 'http';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.PORT || 8080;

app.use(cors());
app.use(express.json({ limit: '50mb' }));

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const dirs = ['uploads', 'outputs', 'temp'];
dirs.forEach(dir => {
  const dirPath = path.join(__dirname, dir);
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è FFmpeg
function sanitizeText(text) {
  if (!text) return '';
  
  return text
    .replace(/['"\\]/g, '') // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–ª–µ—à–∏
    .replace(/:/g, ' - ') // –î–≤–æ–µ—Ç–æ—á–∏—è –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ç–∏—Ä–µ (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è FFmpeg!)
    .replace(/=/g, ' —Ä–∞–≤–Ω–æ ') // –ó–Ω–∞–∫–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    .replace(/\[/g, '(') // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
    .replace(/\]/g, ')')
    .replace(/\n/g, ' ') // –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    .replace(/\r/g, ' ') 
    .replace(/\t/g, ' ') // –¢–∞–±—É–ª—è—Ü–∏–∏
    .replace(/[^\w\s\u0400-\u04FF.,!?()\-]/g, '') // –¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, ' ') // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
    .trim()
    .slice(0, 100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function smartTextSplit(text, numParts) {
  if (!text || text.length < 20) {
    const parts = [];
    for (let i = 0; i < numParts; i++) {
      parts.push(`–ß–∞—Å—Ç—å ${i + 1} –Ω–æ–≤–æ—Å—Ç–∏`);
    }
    return parts;
  }
  
  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
  const cleanText = text
    .replace(/['"\\:=\[\]]/g, ' ') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, ' ')
    .trim();
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
  let sentences = cleanText.split(/[.!?]+/).filter(s => s.trim().length > 15);
  
  if (sentences.length >= numParts) {
    const parts = [];
    const sentencesPerPart = Math.ceil(sentences.length / numParts);
    
    for (let i = 0; i < numParts; i++) {
      const start = i * sentencesPerPart;
      const end = Math.min((i + 1) * sentencesPerPart, sentences.length);
      let partText = sentences.slice(start, end).join('. ').trim();
      
      if (partText) {
        if (!partText.endsWith('.')) partText += '.';
        parts.push(partText.slice(0, 80)); // –ö–æ—Ä–æ—á–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      }
    }
    
    // –î–æ–ø–æ–ª–Ω—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    while (parts.length < numParts) {
      parts.push(`–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ${parts.length + 1}`);
    }
    
    return parts;
  }
  
  // –ú–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - –¥–µ–ª–∏–º –ø–æ –¥–ª–∏–Ω–µ
  const parts = [];
  const charsPerPart = Math.ceil(cleanText.length / numParts);
  
  for (let i = 0; i < numParts; i++) {
    let start = i * charsPerPart;
    let end = Math.min((i + 1) * charsPerPart, cleanText.length);
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ —Å–ª–æ–≤–∞–º
    if (i > 0 && start < cleanText.length) {
      while (start > 0 && cleanText[start] !== ' ') start--;
      if (cleanText[start] === ' ') start++;
    }
    
    if (end < cleanText.length) {
      while (end < cleanText.length && cleanText[end] !== ' ') end++;
    }
    
    const partText = cleanText.substring(start, end).trim().slice(0, 80);
    if (partText) {
      parts.push(partText);
    }
  }
  
  while (parts.length < numParts) {
    parts.push(`–ß–∞—Å—Ç—å ${parts.length + 1} –Ω–æ–≤–æ—Å—Ç–∏`);
  }
  
  return parts.slice(0, numParts);
}

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function downloadImage(url, filepath, index = 0) {
  return new Promise((resolve, reject) => {
    console.log(`üì• [${index + 1}] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É: ${url}`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const tempPath = filepath + '.tmp';
    const file = fs.createWriteStream(tempPath);
    const request = url.startsWith('https:') ? https : http;
    
    const options = {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.9',
        'Cache-Control': 'no-cache'
      }
    };
    
    const req = request.get(url, options, (response) => {
      console.log(`üìä [${index + 1}] HTTP —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`);
      console.log(`üìä [${index + 1}] –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, response.headers);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
      if (response.statusCode === 301 || response.statusCode === 302) {
        const newUrl = response.headers.location;
        console.log(`üîÑ [${index + 1}] –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: ${newUrl}`);
        file.close();
        fs.unlink(tempPath, () => {});
        return downloadImage(newUrl, filepath, index)
          .then(resolve)
          .catch(reject);
      }
      
      if (response.statusCode !== 200) {
        file.close();
        fs.unlink(tempPath, () => {});
        reject(new Error(`HTTP Error ${response.statusCode} for image ${index + 1}: ${url}`));
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const contentType = response.headers['content-type'] || '';
      console.log(`üìÅ [${index + 1}] –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentType}`);
      
      if (!contentType.startsWith('image/')) {
        file.close();
        fs.unlink(tempPath, () => {});
        reject(new Error(`Not an image (${contentType}) for image ${index + 1}: ${url}`));
        return;
      }
      
      console.log(`üíæ [${index + 1}] –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...`);
      response.pipe(file);
      
      let downloadedBytes = 0;
      response.on('data', (chunk) => {
        downloadedBytes += chunk.length;
        if (downloadedBytes % 50000 === 0) { // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 50KB
          console.log(`üìà [${index + 1}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${(downloadedBytes / 1024).toFixed(1)} KB`);
        }
      });
      
      file.on('finish', () => {
        file.close();
        console.log(`‚úÖ [${index + 1}] –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${(downloadedBytes / 1024).toFixed(1)} KB`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if (downloadedBytes < 1000) {
          fs.unlink(tempPath, () => {});
          reject(new Error(`File too small (${downloadedBytes} bytes) for image ${index + 1}`));
          return;
        }
        
        // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        fs.rename(tempPath, filepath, (err) => {
          if (err) {
            console.error(`‚ùå [${index + 1}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:`, err);
            fs.unlink(tempPath, () => {});
            reject(err);
          } else {
            console.log(`‚úÖ [${index + 1}] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);
            resolve();
          }
        });
      });
      
      file.on('error', (err) => {
        console.error(`‚ùå [${index + 1}] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:`, err);
        fs.unlink(tempPath, () => {});
        reject(err);
      });
    });
    
    req.on('error', (err) => {
      console.error(`‚ùå [${index + 1}] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, err);
      file.close();
      fs.unlink(tempPath, () => {});
      reject(err);
    });
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
    req.setTimeout(45000, () => {
      console.error(`‚è∞ [${index + 1}] –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏: ${url}`);
      req.destroy();
      file.close();
      fs.unlink(tempPath, () => {});
      reject(new Error(`Download timeout for image ${index + 1}: ${url}`));
    });
  });
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ
function createPerfectDynamicVideo(imagePaths, outputPath, options) {
  return new Promise((resolve, reject) => {
    const {
      title = '–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è',
      duration = 60,
      channelName = 'AI –ù–æ–≤–æ—Å—Ç–∏',
      subscribeText = '–ü–û–î–ü–ò–®–ò–°–¨ –ù–ê –ö–ê–ù–ê–õ',
      newsText = '',
      fast = false,
      enableKenBurns = true
    } = options;

    console.log(`üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ ${imagePaths.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for (let i = 0; i < imagePaths.length; i++) {
      if (!fs.existsSync(imagePaths[i])) {
        console.error(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${imagePaths[i]}`);
        return reject(new Error(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`));
      }
      
      const stats = fs.statSync(imagePaths[i]);
      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}: ${(stats.size / 1024).toFixed(1)} KB`);
    }

    // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
    const safeTitle = sanitizeText(title);
    const safeChannelName = sanitizeText(channelName);
    const safeSubscribeText = sanitizeText(subscribeText);

    console.log(`üìù –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã:`);
    console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${safeTitle}"`);
    console.log(`   –ö–∞–Ω–∞–ª: "${safeChannelName}"`);
    console.log(`   –ü–æ–¥–ø–∏—Å–∫–∞: "${safeSubscribeText}"`);

    // –ë–ï–ó–û–ü–ê–°–ù–û–ï —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    const textParts = smartTextSplit(newsText, imagePaths.length);
    console.log(`üìù –†–∞–∑–¥–µ–ª–∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ ${textParts.length} —á–∞—Å—Ç–µ–π:`);
    textParts.forEach((part, i) => {
      const safePart = sanitizeText(part);
      console.log(`   ${i + 1}. "${safePart}"`);
    });
    
    const sceneDuration = duration / imagePaths.length;
    console.log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã: ${sceneDuration.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
    
    // –°—Ç—Ä–æ–∏–º –≤—Ö–æ–¥—ã –¥–ª—è FFmpeg
    const inputs = imagePaths.map(imagePath => ['-loop', '1', '-i', imagePath]).flat();
    
    // –°—Ç—Ä–æ–∏–º –ë–ï–ó–û–ü–ê–°–ù–´–ô —Å–ª–æ–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
    const filterParts = [];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    imagePaths.forEach((imagePath, index) => {
      const startTime = index * sceneDuration;
      const endTime = Math.min((index + 1) * sceneDuration, duration);
      const sceneLength = endTime - startTime;
      
      console.log(`üé¨ –°—Ü–µ–Ω–∞ ${index + 1}: ${startTime.toFixed(1)}s - ${endTime.toFixed(1)}s`);
      
      // –£–ü–†–û–©–ï–ù–ù–´–ô Ken Burns —ç—Ñ—Ñ–µ–∫—Ç (—É–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—É—é –º–∞—Ç–µ–º–∞—Ç–∏–∫—É)
      let videoFilter = `[${index}:v]scale=1920:1080:force_original_aspect_ratio=increase,crop=1920:1080`;
      
      if (enableKenBurns) {
        // –ü—Ä–æ—Å—Ç—ã–µ, –Ω–∞–¥–µ–∂–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        if (index % 2 === 0) {
          // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
          videoFilter += `,zoompan=z='min(1.3,1.0+0.001*t)':d=25*${sceneLength}:x='iw/2-(iw/zoom/2)':y='ih/2-(ih/zoom/2)':s=1920x1080`;
        } else {
          // –û—Ç–¥–∞–ª–µ–Ω–∏–µ
          videoFilter += `,zoompan=z='max(1.0,1.3-0.001*t)':d=25*${sceneLength}:x='iw/2-(iw/zoom/2)':y='ih/2-(ih/zoom/2)':s=1920x1080`;
        }
      }
      
      videoFilter += `,setpts=PTS-STARTPTS+${startTime}/TB[v${index}]`;
      filterParts.push(videoFilter);
      
      // –ë–ï–ó–û–ü–ê–°–ù–´–ï —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã
      const subtitleText = sanitizeText(textParts[index] || `–ß–∞—Å—Ç—å ${index + 1}`);
      console.log(`üìù –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã ${index + 1}: "${subtitleText}"`);
      
      const subtitleStart = startTime + 1;
      const subtitleEnd = endTime - 0.5;
      
      if (subtitleText && subtitleText.length > 3) {
        // –ü–†–û–°–¢–û–ô drawtext –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        filterParts.push(`[v${index}]drawtext=text='${subtitleText}':fontcolor=white:fontsize=32:x=(w-text_w)/2:y=h-120:box=1:boxcolor=black@0.8:boxborderw=8:enable='between(t,${subtitleStart.toFixed(1)},${subtitleEnd.toFixed(1)})'[v${index}s]`);
      } else {
        filterParts.push(`[v${index}]copy[v${index}s]`);
      }
    });

    // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å—Ü–µ–Ω—ã
    const concatInputs = imagePaths.map((_, index) => `[v${index}s]`).join('');
    const concatFilter = `${concatInputs}concat=n=${imagePaths.length}:v=1:a=0[vconcat]`;
    filterParts.push(concatFilter);

    // –ü–†–û–°–¢–´–ï –æ–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    filterParts.push(`[vconcat]drawbox=x=0:y=0:w=1920:h=80:color=red@0.9:t=fill[vbar]`);
    filterParts.push(`[vbar]drawtext=text='–í–ê–ñ–ù–´–ï –ù–û–í–û–°–¢–ò':fontsize=28:fontcolor=white:x=(w-text_w)/2:y=25[vtop]`);
    
    if (safeTitle.length > 0) {
      filterParts.push(`[vtop]drawtext=text='${safeTitle}':fontsize=48:fontcolor=yellow:x=(w-text_w)/2:y=300:box=1:boxcolor=black@0.8:boxborderw=10:enable='between(t,1,8)'[vtitle]`);
    } else {
      filterParts.push(`[vtop]copy[vtitle]`);
    }
    
    if (safeChannelName.length > 0) {
      filterParts.push(`[vtitle]drawtext=text='${safeChannelName}':fontsize=24:fontcolor=white:x=50:y=h-50:box=1:boxcolor=red@0.8:boxborderw=6[vchannel]`);
    } else {
      filterParts.push(`[vtitle]copy[vchannel]`);
    }
    
    if (safeSubscribeText.length > 0) {
      const subscribeStart = Math.max(0, duration - 6);
      filterParts.push(`[vchannel]drawtext=text='${safeSubscribeText}':fontsize=32:fontcolor=black:x=(w-text_w)/2:y=h-60:box=1:boxcolor=yellow@0.9:boxborderw=8:enable='between(t,${subscribeStart.toFixed(1)},${duration})'[vfinal]`);
    } else {
      filterParts.push(`[vchannel]copy[vfinal]`);
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const filterComplex = filterParts.join('; ');
    
    console.log(`üé¨ –°–æ–∑–¥–∞–Ω–æ ${filterParts.length} –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤`);
    console.log(`üîß –î–ª–∏–Ω–∞ filter_complex: ${filterComplex.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    // FFmpeg –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    const ffmpegArgs = [
      ...inputs,
      '-filter_complex', filterComplex,
      '-map', '[vfinal]',
      '-c:v', 'libx264',
      '-t', duration.toString(),
      '-pix_fmt', 'yuv420p',
      '-r', fast ? '25' : '30',
      '-preset', fast ? 'ultrafast' : 'fast',
      '-crf', fast ? '23' : '20',
      '-y',
      outputPath
    ];

    console.log('üé¨ –ó–∞–ø—É—Å–∫ FFmpeg –¥–ª—è –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –≤–∏–¥–µ–æ');

    const ffmpegProcess = spawn('ffmpeg', ffmpegArgs, {
      stdio: 'pipe'
    });

    let stdout = '';
    let stderr = '';

    ffmpegProcess.stdout.on('data', (data) => {
      stdout += data.toString();
    });

    ffmpegProcess.stderr.on('data', (data) => {
      stderr += data.toString();
      const line = data.toString().trim();
      if (line.includes('frame=') || line.includes('time=')) {
        const timeMatch = line.match(/time=(\d{2}):(\d{2}):(\d{2})/);
        if (timeMatch) {
          const currentSeconds = parseInt(timeMatch[1]) * 3600 + parseInt(timeMatch[2]) * 60 + parseInt(timeMatch[3]);
          const progress = ((currentSeconds / duration) * 100).toFixed(1);
          console.log(`‚ö° –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`);
        }
      }
    });

    ffmpegProcess.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        resolve({ 
          stdout, 
          stderr,
          method: 'Fixed Dynamic Video',
          features: [
            '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ‚úì',
            '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ FFmpeg —Ñ–∏–ª—å—Ç—Ä—ã ‚úì',
            '–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Ken Burns ‚úì',
            '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã ‚úì'
          ]
        });
      } else {
        console.error('‚ùå FFmpeg –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π, –∫–æ–¥:', code);
        console.error('‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ stderr:', stderr.split('\n').slice(-5).join('\n'));
        reject(new Error(`FFmpeg exited with code ${code}. Last stderr: ${stderr.slice(-300)}`));
      }
    });

    ffmpegProcess.on('error', (error) => {
      console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FFmpeg:', error);
      reject(error);
    });
  });
}

// –ì–õ–ê–í–ù–´–ô API ENDPOINT
app.post('/api/create-news-video', async (req, res) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ');
  console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));
  
  try {
    const {
      title = '–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–Ω—è',
      backgroundImage,
      duration = 45,
      channelName = 'AI –ù–æ–≤–æ—Å—Ç–∏',
      subscribeText = '–ü–û–î–ü–ò–®–ò–°–¨ –ù–ê –ö–ê–ù–ê–õ!',
      fast = false,
      enhanced = true,
      newsText = '',
      images = [],
      enableKenBurns = true
    } = req.body;

    const timestamp = Date.now();
    const videoFilename = `fixed_news_${timestamp}.mp4`;
    const outputPath = path.join(__dirname, 'outputs', videoFilename);
    const tempDir = path.join(__dirname, 'temp', `fixed_${timestamp}`);

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const imageUrls = [];
    
    if (Array.isArray(images) && images.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      images.forEach((img, i) => {
        const url = typeof img === 'string' ? img : img.url;
        if (url) {
          imageUrls.push(url);
          console.log(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}: ${url}`);
        }
      });
    }
    
    if (backgroundImage && !imageUrls.includes(backgroundImage)) {
      imageUrls.unshift(backgroundImage);
      console.log(`üñºÔ∏è –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${backgroundImage}`);
    }

    // –ú–∏–Ω–∏–º—É–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
    if (imageUrls.length === 0) {
      return res.status(400).json({ 
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (backgroundImage –∏–ª–∏ images)'
      });
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const limitedUrls = imageUrls.slice(0, 4);
    console.log(`üìä –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ${limitedUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

    // –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–ï —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    const imagePaths = [];
    
    for (let i = 0; i < limitedUrls.length; i++) {
      const imageUrl = limitedUrls[i];
      const imagePath = path.join(tempDir, `image_${i}.jpg`);
      
      console.log(`\n‚¨áÔ∏è ===== –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ${i + 1}/${limitedUrls.length} =====`);
      console.log(`üîó URL: ${imageUrl}`);
      console.log(`üìÅ –ü—É—Ç—å: ${imagePath}`);
      
      try {
        await downloadImage(imageUrl, imagePath, i);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (fs.existsSync(imagePath)) {
          const stats = fs.statSync(imagePath);
          if (stats.size > 1000) {
            imagePaths.push(imagePath);
            console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ`);
          } else {
            console.error(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1} —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ: ${stats.size} –±–∞–π—Ç`);
          }
        } else {
          console.error(`‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1} –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}:`, error.message);
        
        // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
        if (i === 0) {
          console.error(`üí• –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º`);
          throw error;
        }
      }
      
      console.log(`===== –ö–û–ù–ï–¶ –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ${i + 1} =====\n`);
    }

    console.log(`üìä –ò–¢–û–ì–û –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imagePaths.length} –∏–∑ ${limitedUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

    if (imagePaths.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }

    // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    const result = await createPerfectDynamicVideo(imagePaths, outputPath, {
      title,
      duration,
      channelName,
      subscribeText,
      newsText,
      fast,
      enableKenBurns
    });
    
    console.log('‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    if (fs.existsSync(tempDir)) {
      fs.rmSync(tempDir, { recursive: true, force: true });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!fs.existsSync(outputPath)) {
      throw new Error('–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
    }
    
    const stats = fs.statSync(outputPath);
    const fileSizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
    
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSizeInMB} MB`);
    
    res.json({
      success: true,
      message: '–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –Ω–æ–≤–æ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ! üé¨‚ú®',
      data: {
        filename: videoFilename,
        downloadUrl: `/api/download/${videoFilename}`,
        streamUrl: `/api/stream/${videoFilename}`,
        size: `${fileSizeInMB} MB`,
        duration: duration,
        resolution: '1920x1080',
        title: title,
        method: result.method,
        features: result.features,
        imagesUsed: imagePaths.length,
        imagesRequested: limitedUrls.length,
        mode: imagePaths.length > 1 ? 'dynamic' : 'enhanced',
        created: new Date().toISOString()
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –≤–∏–¥–µ–æ:', error);
    res.status(500).json({
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ',
      message: error.message
    });
  }
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ endpoints (download, stream, test)
app.get('/api/download/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(__dirname, 'outputs', filename);
  
  if (!fs.existsSync(filepath)) {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  res.download(filepath, filename);
});

app.get('/api/stream/:filename', (req, res) => {
  const filename = req.params.filename;
  const filepath = path.join(__dirname, 'outputs', filename);
  
  if (!fs.existsSync(filepath)) {
    return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  const stat = fs.statSync(filepath);
  const fileSize = stat.size;
  const range = req.headers.range;
  
  if (range) {
    const parts = range.replace(/bytes=/, "").split("-");
    const start = parseInt(parts[0], 10);
    const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1;
    const chunksize = (end - start) + 1;
    const file = fs.createReadStream(filepath, { start, end });
    const head = {
      'Content-Range': `bytes ${start}-${end}/${fileSize}`,
      'Accept-Ranges': 'bytes',
      'Content-Length': chunksize,
      'Content-Type': 'video/mp4',
    };
    res.writeHead(206, head);
    file.pipe(res);
  } else {
    const head = {
      'Content-Length': fileSize,
      'Content-Type': 'video/mp4',
    };
    res.writeHead(200, head);
    fs.createReadStream(filepath).pipe(res);
  }
});

// –¢–µ—Å—Ç
app.post('/api/test', async (req, res) => {
  console.log('üß™ –¢–µ—Å—Ç –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô —Å–∏—Å—Ç–µ–º—ã');
  
  try {
    const testProcess = spawn('ffmpeg', ['-version'], {
      stdio: 'pipe'
    });
    
    let output = '';
    testProcess.stdout.on('data', (data) => {
      output += data.toString();
    });
    
    testProcess.on('close', (code) => {
      res.json({
        success: true,
        message: '–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–∞!',
        ffmpegAvailable: code === 0,
        ffmpegVersion: output.split('\n')[0],
        features: [
          '‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è FFmpeg',
          '‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤',
          '‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ Ken Burns —ç—Ñ—Ñ–µ–∫—Ç—ã',
          '‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏',
          '‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏',
          '‚úÖ –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫'
        ],
        improvements: [
          'üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–≤–æ–µ—Ç–æ—á–∏–π –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤',
          'üîß –£–ø—Ä–æ—â–µ–Ω—ã Ken Burns —ç—Ñ—Ñ–µ–∫—Ç—ã',
          'üîß –£–∫–æ—Ä–æ—á–µ–Ω—ã —Ç–µ–∫—Å—Ç—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤',
          'üîß –£–±—Ä–∞–Ω—ã —Å–ª–æ–∂–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è'
        ],
        limits: {
          maxImages: 4,
          maxDuration: 60,
          imageTimeout: 45,
          textLength: 100
        }
      });
    });
    
  } catch (error) {
    res.json({
      success: false,
      error: error.message
    });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    message: 'üé¨ FIXED Image-Based News Video API',
    version: '6.1.0 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø',
    description: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
    
    features: {
      'üì• –ó–∞–≥—Ä—É–∑–∫–∞': '–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ + –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤',
      'üìù –¢–µ–∫—Å—Ç': '–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
      'üé¨ –≠—Ñ—Ñ–µ–∫—Ç—ã': '–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ Ken Burns (—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ)',
      'üìä –§–∏–ª—å—Ç—Ä—ã': '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ FFmpeg –∫–æ–º–∞–Ω–¥—ã',
      'üé® –ö–∞—á–µ—Å—Ç–≤–æ': '–°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ'
    },
    
    endpoints: {
      createVideo: 'POST /api/create-news-video',
      test: 'POST /api/test',
      download: 'GET /api/download/:filename',
      stream: 'GET /api/stream/:filename'
    },
    
    fixes: [
      'üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–µ—Ç–æ—á–∏–π –≤ —Ç–µ–∫—Å—Ç–µ',
      'üîß –£–ø—Ä–æ—â–µ–Ω—ã Ken Burns —ç—Ñ—Ñ–µ–∫—Ç—ã',
      'üîß –°–æ–∫—Ä–∞—â–µ–Ω–∞ –¥–ª–∏–Ω–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤',
      'üîß –£–±—Ä–∞–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã',
      'üîß –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã FFmpeg —Ñ–∏–ª—å—Ç—Ä—ã'
    ],
    
    status: '–ì–æ—Ç–æ–≤–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –°–¢–ê–ë–ò–õ–¨–ù–´–• –≤–∏–¥–µ–æ! üöÄ‚úÖ'
  });
});

app.listen(PORT, '0.0.0.0', () => {
  console.log('üé¨ ===== FIXED IMAGE-BASED NEWS VIDEO API =====');
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('‚ú® –†–µ–∂–∏–º: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ');
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
  console.log('   üìù –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞');
  console.log('   üé¨ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ Ken Burns —ç—Ñ—Ñ–µ–∫—Ç—ã');
  console.log('   üìä –°—Ç–∞–±–∏–ª—å–Ω—ã–µ FFmpeg —Ñ–∏–ª—å—Ç—Ä—ã');
  console.log('   üéØ –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã');
  console.log('   ‚ö° –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤');
  console.log('================================================');
});

export default app;
